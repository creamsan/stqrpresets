{
    "version": 2,
    "name": "qr-quick-import",
    "disableSend": false,
    "placeBeforeInput": false,
    "injectInput": false,
    "qrList": [
        {
            "id": 1,
            "label": "Update Presets",
            "title": "",
            "message": "/setvar key=links \"https://creamsan.neocities.org/files/presets/creamsancollection.json\"\n\n|\n\n/setvar key=autoActivate \"creamsan\"\n\n|\n\n/flushvar toUpdate |\n\n/input <h3>Enter the password you've set in your browser extension.</h3> | /setvar key=pass |\n\n/getvar pass |\n/len | /setvar key=len |\n/if left=len right=0 rule=lte else=\"/pass true\" \"/pass false\" |\n/if left={{pipe}} rule=eq right=false \"/abort\"\n\n|\n\n/input #{{getvar::pass}}<script type=\"text/javascript\">\n(() => {setTimeout(() => {\n//essentials\n//get the popup components we can play with\nconst popup = document.querySelector(\"#dialogue_popup_holder\");\nconst popupHeader = popup.querySelector(\"#dialogue_popup_text\");\nconst popupInput = popup.querySelector(\"#dialogue_popup_input\");\nconst popupControls = popup.querySelector(\"#dialogue_popup_controls\");\nconst okButton = popupControls.querySelector(\"#dialogue_popup_ok\");\nconst cancelButton = popupControls.querySelector(\"#dialogue_popup_cancel\");\n\n//output setter\nconst setReturnValue = (val) => {\n  popupInput.value = val;\n};\n\n//hide/show popup elems - only select: popupHeader, popupInput, okButton, cancelButton\nconst hidePopupElems = (elems) => {\n  elems.forEach((elem) => {\n    elem.style.visibility = \"hidden\"\n    elem.style.position = \"absolute\"\n  })\n};\nconst showPopupElems = (elems) => {\n  elems.forEach((elem) => {\n    elem.style.visibility = \"visible\"\n    elem.style.position = \"static\"\n  })\n};\n\nconst mainCont = document.querySelector(\"#main\");\nconst selections = mainCont.querySelector(\"#selections\");\nconst bulkSelectors = mainCont.querySelector(\"#bulk_selectors\");\nconst selectAll = bulkSelectors.querySelector(\"#select_all\");\nconst deselectAll = bulkSelectors.querySelector(\"#deselect_all\");\nlet allPresets\nlet toUpdate\n\n\nconst getPresets = async () => {\n  return new Promise((resolve, reject) => {\n    const timestamp = Date.now()\n    const rand = Math.floor(Math.random() * 1000000)\n    const links = [\n      {{getvar::links}}\n    ]\n    let presets = []\n    let i = 0\n    links.forEach(async (link) => {\n      const corsProxyUrl = `https://corsproxy.io/?${link}?nocache=${timestamp}_${rand}`\n      const response = await fetch(corsProxyUrl, {\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n      })\n      if(response.status === 200) {\n        const presetsFromLink = await response.json()\n        presets = [...presets, ...presetsFromLink]\n      }\n      else {\n        console.error(`Error with the provided link: ${link}`)\n      }\n      if(i === links.length - 1) {\n        resolve(presets)\n      }\n      i++\n    })\n  })\n}\n\n\nconst initSelections = () => {\n  const optionsDisp = allPresets.map((option) => `<div class=\"selection\">\n  <input type=\"checkbox\" id=\"${option[\"name\"]}\" name=\"${option[\"name\"]}\" value=\"${option[\"name\"]}\" checked>\n  <label for=\"${option[\"name\"]}\">${option[\"name\"]} <span style=\"font-size: 11px; color: green; text-shadow: 0 0 1px white\">${option[\"version\"]}</span></label>\n</div>`\n).join('')\n\n  selections.innerHTML = optionsDisp;\n}\n\n\nconst initSelectionsEvents = () => {\n  allPresets.forEach((preset) => {\n    const selection = selections.querySelector(`#${preset[\"name\"]}`)\n    selection.addEventListener(\"change\", onCheckboxChange)\n  })\n}\n\n\nconst onCheckboxChange = (e) => {\n  if(e.srcElement.checked) {\n    toUpdate.push(e.srcElement.value);\n  }\n  else {\n    toUpdate = toUpdate.filter((preset) => preset !== e.srcElement.value)\n  }\n\n  const o = allPresets.filter((preset) => toUpdate.includes(preset[\"name\"]))\n  setReturnValue(JSON.stringify(o.map((preset) => preset[\"link\"])))\n}\n\n\nconst main = async () => {\n  hidePopupElems([popupInput]);\n\n  allPresets = await getPresets()\n  toUpdate = allPresets.map((preset) => preset[\"name\"])\n  let o = allPresets.filter((preset) => toUpdate.includes(preset[\"name\"]))\n  setReturnValue(JSON.stringify(o.map((preset) => preset[\"link\"])))\n  initSelections();\n  initSelectionsEvents();\n\n  okButton.addEventListener(\"click\", (e) => {\n    showPopupElems([popupHeader, popupInput, okButton, cancelButton])\n  });\n  cancelButton.addEventListener(\"click\", (e) => {\n    showPopupElems([popupHeader, popupInput, okButton, cancelButton])\n  });\n\n  selectAll.addEventListener(\"click\", (e) => {\n    if(allPresets.length <= 0) {\n      return\n    }\n    allPresets.forEach((preset) => {\n      const selection = selections.querySelector(`#${preset[\"name\"]}`)\n      selection.checked = true;\n    })\n    toUpdate = allPresets.map((preset) => preset[\"name\"])\n    o = allPresets.filter((preset) => toUpdate.includes(preset[\"name\"]))\n    setReturnValue(JSON.stringify(o.map((preset) => preset[\"link\"])))\n  });\n  deselectAll.addEventListener(\"click\", (e) => {\n    if(allPresets.length <= 0) {\n      return\n    }\n    allPresets.forEach((preset) => {\n      const selection = selections.querySelector(`#${preset[\"name\"]}`)\n      selection.checked = false;\n    })\n    toUpdate = []\n    o = allPresets.filter((preset) => toUpdate.includes(preset[\"name\"]))\n    setReturnValue(JSON.stringify(o.map((preset) => preset[\"link\"])))\n  });\n};\n\nmain();\n\n}, 0)})();\n</script>\n\n<h3>Select presets to update.</h3>\n<div id=\"main\">\n\n<style>\n#selections{margin: 0 auto;\ndisplay: inline-block;\nwidth: auto;\nmin-width: 0;\n}\n.selection{display: flex;\n}\n#select_all, #deselect_all{background-color: var(--crimson70a);\ncursor: pointer;\nfont-size: 12px;\ntext-wrap: nowrap;\n}\n#bulk_selectors{display: flex;\ngap: 2px;\njustify-content: center;\n}\n</style>\n\n<div id=\"selections\">Loading...</div>\n\n<div id=\"bulk_selectors\">\n  <button class=\"menu_button\" id=\"select_all\">Select all</button><br>\n  <button class=\"menu_button\" id=\"deselect_all\">Deselect all</button><br>\n</div>\n\n</div><hr>\n\n|\n\n/setvar key=toUpdate |\n\n/getvar toUpdate |\n/len | /setvar key=len |\n/if left=len right=0 rule=lte else=\"/pass true\" \"/pass false\" |\n/if left={{pipe}} rule=eq right=false \"/abort\"\n\n|\n\n/input #{{getvar::pass}}<script type=\"text/javascript\">\n(() => {setTimeout(() => {\n//essentials\n//get the popup components we can play with\nconst popup = document.querySelector(\"#dialogue_popup_holder\");\nconst popupHeader = popup.querySelector(\"#dialogue_popup_text\");\nconst popupInput = popup.querySelector(\"#dialogue_popup_input\");\nconst popupControls = popup.querySelector(\"#dialogue_popup_controls\");\nconst okButton = popupControls.querySelector(\"#dialogue_popup_ok\");\nconst cancelButton = popupControls.querySelector(\"#dialogue_popup_cancel\");\n\n//output setter\nconst setReturnValue = (val) => {\n  popupInput.value = val;\n};\n\n//hide/show popup elems - only select: popupHeader, popupInput, okButton, cancelButton\nconst hidePopupElems = (elems) => {\n  elems.forEach((elem) => {\n    elem.style.visibility = \"hidden\"\n    elem.style.position = \"absolute\"\n  })\n};\nconst showPopupElems = (elems) => {\n  elems.forEach((elem) => {\n    elem.style.visibility = \"visible\"\n    elem.style.position = \"static\"\n  })\n};\n\n\nconst toUpdate = {{getvar::toUpdate}};\nconst timestamp = Date.now();\nconst rand = Math.floor(Math.random() * 1000000);\nconst autoActivate = [\n  {{getvar::autoActivate}}\n]\n\n//put json urls here\nconst QR_JSON_URLS = toUpdate.map((link) => `${link}?nocache=${timestamp}_${rand}`);\n\n\nconst main = () => {\n  hidePopupElems([popupInput, okButton, cancelButton]);\n\n  update();\n\n  okButton.addEventListener(\"click\", (e) => {\n    showPopupElems([popupHeader, popupInput, okButton, cancelButton])\n  });\n  cancelButton.addEventListener(\"click\", (e) => {\n    showPopupElems([popupHeader, popupInput, okButton, cancelButton])\n  });\n};\n\n\nasync function update() {\n  /**\n   *  DO NOT FUCK AROUND WITH THE STUFF BELOW\n   *  UNLESS YOU KNOW WHAT YOU ARE DOING\n   */\n\n  /**\n   * Loads SillyTavern QuickReply API instance\n   *\n   * @returns {Promise<QuickReplyApi>}\n   */\n  const loadQrApi = async () => {\n    const { quickReplyApi } = await import('./scripts/extensions/quick-reply/index.js');\n    return quickReplyApi;\n  }\n\n  /**\n   * Fetches JSON object from a given URL\n   *\n   * @param {string} url - The URL to get the JSON from\n   *\n   * @returns {Promise<object>} - The parsed Object\n   */\n  const fetchJson = async (url) => {\n    const corsProxyUrl = \"https://corsproxy.io/?\";\n    const response = await fetch(corsProxyUrl + url);\n\n    return await response.json();\n  }\n\n  /**\n   * Update a QuickReply withing a QuickReplySet;\n   * This will overwrite the set\n   *\n   * @param {QuickReplyApi} api - The ST QR API instance\n   * @param {QuickReplySet} set - The QuickReplySet in which to update the QuickReply\n   * @param {QuickReply} qr - The QuickReply data to update with\n   *\n   * @returns {Promise<void>}\n   */\n  const updateQuickReply = async (api, set, qr) => {\n    console.log(\"Updating existing qr\", qr, \"in set\", set);\n    api.updateQuickReply(set.name, qr.label, { ...qr });\n  };\n\n  /**\n   * Create a QuickReply within a QuickReplySet\n   *\n   * @param {QuickReplyApi} api - The ST QR API instance\n   * @param {QuickReplySet} set - The QuickReplySet in which to create the QuickReply\n   * @param {QuickReply} qr - The QuickReply to create\n   *\n   * @returns {Promise<void>}\n   */\n  const createQuickReply = (api, set, qr) => {\n    console.log(\"Creating new qr\", qr, \"in set\", set);\n    api.createQuickReply(set.name, qr.label, { ...qr });\n  };\n\n  /**\n   * Update an already existing QuickReplySet;\n   * This will overwrite the qr\n   *\n   * @param {QuickReplyApi} api - The ST QR API instance\n   * @param {QuickReplySet} set - The already existing QuickReplySet\n   * @param {object} data - The data to update the set with\n   *\n   * @returns {Promise<void>}\n   */\n  const updateQuickReplySet = async (api, set, data) => {\n    console.log(\"Updating set\", set, data);\n\n    await api.updateSet(set.name, { ...data });\n\n    for (const qr of data.qrList) {\n      const existingQr = await api.getQrByLabel(set.name, qr.label);\n\n      if (existingQr) {\n          await updateQuickReply(api, set, qr);\n      } else {\n          await createQuickReply(api, set, qr);\n      }\n    }\n  }\n\n  /**\n   * Create a new QuickReplySet\n   *\n   * @param {QuickReplyApi} api - The ST QR API instance\n   * @param {object} data - The data to create the set with\n   *\n   * @returns {Promise<void>}\n   */\n  const createQuickReplySet = async (api, data) => {\n    console.log(\"Creating new set\", data);\n\n    const set = await api.createSet(data.name);\n    return updateQuickReplySet(api, set, data);\n  }\n\n  // Main\n  const api = await loadQrApi();\n\n  for (const url of QR_JSON_URLS) {\n    console.log(\"Loading\", url);\n\n    try {\n      const data = await fetchJson(url);\n      const set = await api.getSetByName(data.name);\n\n      if (set) {\n          await updateQuickReplySet(api, set, data);\n      } else {\n          await createQuickReplySet(api, data);\n      }\n    } catch (e) {\n      console.error(\"Failed to load\", url, e);\n    }\n  }\n\n  console.log(\"Done\");\n  \n  const output = {\n    \"toEcho\": \"Update completed. Check the console (F12) for more details.\",\n    \"toActivate\": autoActivate\n  }\n  setReturnValue(JSON.stringify(output));\n  showPopupElems([okButton]);\n}\n\nmain();\n\n}, 0)})();\n</script>\n\n<h3>Updating...</h3>\n<h3>Reload ST after updating.</h3><hr>\n\n|\n\n/setvar key=output |\n\n/getvar index=toEcho output | /echo |\n\n/getvar index=toActivate output | /setvar key=toActivate |\n/len {{getvar::toActivate}} | /setvar key=len |\n/if left=len rule=lte right=0 \"/abort\" |\n\n/setvar key=i 0 |\n/times {{getvar::len}} \"/getvar index=\\{\\{getvar::i\\}\\} toActivate \\| /qr-set-on \\{\\{pipe\\}\\}  \\| /addvar key=i 1\"",
            "contextList": [],
            "preventAutoExecute": true,
            "isHidden": false,
            "executeOnStartup": false,
            "executeOnUser": false,
            "executeOnAi": false,
            "executeOnChatChange": false,
            "executeOnGroupMemberDraft": false,
            "automationId": ""
        }
    ],
    "idIndex": 2
}