{
    "version": 2,
    "name": "sini",
    "disableSend": false,
    "placeBeforeInput": false,
    "injectInput": false,
    "qrList": [
        {
            "id": 2,
            "label": "init",
            "title": "",
            "message": "/echo Initializing |\n/if left={{lastMessageId}} rule=neq right=0 \"/abort\" |\n\n/input #{{getvar::pass}}<script type=\"text/javascript\">\nsetTimeout(() => {\n\n//essentials\n//get the popup components we can play with\nconst popup = document.querySelector(\"#dialogue_popup_holder\");\nconst popupHeader = popup.querySelector(\"#dialogue_popup_text\");\nconst popupInput = popup.querySelector(\"#dialogue_popup_input\");\nconst popupControls = popup.querySelector(\"#dialogue_popup_controls\");\nconst okButton = popupControls.querySelector(\"#dialogue_popup_ok\");\nconst cancelButton = popupControls.querySelector(\"#dialogue_popup_cancel\");\n\n//output setter\nconst setReturnValue = (val) => {\n  popupInput.value = val;\n};\n\n//hide/show popup elems - only select: popupHeader, popupInput, okButton, cancelButton\nconst hidePopupElems = (elems) => {\n  elems.forEach((elem) => {\n    elem.style.visibility = \"hidden\"\n    elem.style.position = \"absolute\"\n  })\n};\nconst showPopupElems = (elems) => {\n  elems.forEach((elem) => {\n    elem.style.visibility = \"visible\"\n    elem.style.position = \"static\"\n  })\n};\n\nconst main = () => {\n  hidePopupElems([popupInput]);\n\n  setReturnValue(\"JS unlocked!\")\n  \n  okButton.addEventListener(\"click\", (e) => {\n    showPopupElems([popupHeader, popupInput, okButton, cancelButton])\n  });\n  cancelButton.addEventListener(\"click\", (e) => {\n    showPopupElems([popupHeader, popupInput, okButton, cancelButton])\n  });\n};\n\nmain();\n\n}, 0);\n</script>\n\n<h3>Hello and welcome! If you see a \"JS unlocked!\" message after pressing ok, that means your user script is working.</h3> |\n\n/echo |\n\n/setvar key=userinfoarr index=0 None so far",
            "contextList": [],
            "preventAutoExecute": false,
            "isHidden": true,
            "executeOnStartup": false,
            "executeOnUser": false,
            "executeOnAi": false,
            "executeOnChatChange": false,
            "executeOnGroupMemberDraft": false,
            "automationId": ""
        },
        {
            "id": 3,
            "label": "userprocess",
            "title": "",
            "message": "/setvar key=userinput {{input}} |\n/run sini.addinfo | /flushvar nadanada",
            "contextList": [],
            "preventAutoExecute": false,
            "isHidden": true,
            "executeOnStartup": false,
            "executeOnUser": false,
            "executeOnAi": false,
            "executeOnChatChange": false,
            "executeOnGroupMemberDraft": false,
            "automationId": ""
        },
        {
            "id": 4,
            "label": "aiprocess",
            "title": "",
            "message": "/if left={{lastMessageId}} right=0 rule=eq \"/abort\"",
            "contextList": [],
            "preventAutoExecute": false,
            "isHidden": true,
            "executeOnStartup": false,
            "executeOnUser": false,
            "executeOnAi": true,
            "executeOnChatChange": false,
            "executeOnGroupMemberDraft": false,
            "automationId": ""
        },
        {
            "id": 5,
            "label": "Send",
            "title": "",
            "message": "/run sini.userprocess |\n/send {{getvar::userinput}}{{newline}}{{pipe}} |\n/trigger | /flushvar nadanada | /setinput",
            "contextList": [],
            "preventAutoExecute": false,
            "isHidden": false,
            "executeOnStartup": false,
            "executeOnUser": false,
            "executeOnAi": false,
            "executeOnChatChange": false,
            "executeOnGroupMemberDraft": false,
            "automationId": ""
        },
        {
            "id": 8,
            "label": "addinfo",
            "title": "",
            "message": "/input #{{getvar::pass}}<script type=\"text/javascript\">\nsetTimeout(() => {\n\n//essentials\n//get the popup components we can play with\nconst popup = document.querySelector(\"#dialogue_popup_holder\");\nconst popupHeader = popup.querySelector(\"#dialogue_popup_text\");\nconst popupInput = popup.querySelector(\"#dialogue_popup_input\");\nconst popupControls = popup.querySelector(\"#dialogue_popup_controls\");\nconst okButton = popupControls.querySelector(\"#dialogue_popup_ok\");\nconst cancelButton = popupControls.querySelector(\"#dialogue_popup_cancel\");\n\n//output setter\nconst setReturnValue = (val) => {\n  popupInput.value = val;\n};\n\n//hide/show popup elems - only select: popupHeader, popupInput, okButton, cancelButton\nconst hidePopupElems = (elems) => {\n  elems.forEach((elem) => {\n    elem.style.visibility = \"hidden\"\n    elem.style.position = \"absolute\"\n  })\n};\nconst showPopupElems = (elems) => {\n  elems.forEach((elem) => {\n    elem.style.visibility = \"visible\"\n    elem.style.position = \"static\"\n  })\n};\n\n\nlet userInfoArr = {{getvar::userinfoarr}}\nlet aiResponse = `{{lastMessage}}`\nlet toEcho = \"No info added\"\n\nconst addInfoToArr = () => {\n  userInfoArr = userInfoArr.filter(item => /None so far/i.test(item) === false)\n\n  if(/replace\\(/.test(aiResponse)) {\n    //replace command\n    let newInfo = (aiResponse.match(/(?<=replace\\(\\d+?,\\s)[\\S\\s]+(?=\\))/i))[0]\n    let lineNum = (aiResponse.match(/(?<=replace\\()\\d+?(?=,)/i))[0]\n    lineNum -= 1\n    let oldInfo = userInfoArr[lineNum]\n    toEcho = `Replaced \"${oldInfo}\" with \"${newInfo}\"`\n    userInfoArr[lineNum] = newInfo\n  }\n  else if(/add\\(/.test(aiResponse)) {\n    //add command\n    let newInfo = (aiResponse.match(/(?<=add\\()[\\S\\s]+(?=\\))/i))[0]\n    toEcho = `Added \"${newInfo}\"`\n    userInfoArr.push(newInfo)\n  }\n}\n\nconst genOutput = () => {\n  let lorebookInfo\n  for(let i = 0; i < userInfoArr.length; i++) {\n    if(lorebookInfo === undefined) {\n      lorebookInfo = `${i + 1}. ${userInfoArr[i]}`\n      continue\n    }\n    lorebookInfo = `${lorebookInfo}\n${i + 1}. ${userInfoArr[i]}`\n  }\n  \n  let output = {\n    \"toEcho\": toEcho,\n    \"toUserInfoArr\": userInfoArr,\n    \"toLorebook\": `<{{user}}>\nWhat Sini knows about {{user}}:\n${lorebookInfo}\n</{{user}}>`\n  }\n\n  setReturnValue(JSON.stringify(output))\n}\n\n\nconst main = () => {\n  hidePopupElems([popupInput, cancelButton]);\n\n  addInfoToArr()\n  genOutput()\n  \n  okButton.addEventListener(\"click\", (e) => {\n    showPopupElems([popupHeader, popupInput, okButton, cancelButton])\n  });\n  cancelButton.addEventListener(\"click\", (e) => {\n    showPopupElems([popupHeader, popupInput, okButton, cancelButton])\n  });\n\n  let ev = new Event(\"click\")\n  okButton.dispatchEvent(ev)\n};\n\nmain();\n\n}, 0);\n</script>\n\n<h3>Please wait...</h3>\n<div>You are not expected to read this; if you do, there's probably an error.</div> |\n\n/setvar key=output {{pipe}} |\n\n/getvar index=toEcho output | /echo |\n\n/getvar index=toUserInfoArr output | /setvar key=userinfoarr |\n\n/getvar index=toLorebook output |\n/setentryfield file=\"Sini\" uid=0 field=content {{pipe}}",
            "contextList": [],
            "preventAutoExecute": false,
            "isHidden": true,
            "executeOnStartup": false,
            "executeOnUser": false,
            "executeOnAi": false,
            "executeOnChatChange": false,
            "executeOnGroupMemberDraft": false,
            "automationId": ""
        }
    ],
    "idIndex": 9
}