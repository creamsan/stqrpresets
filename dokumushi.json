{"version":2,"name":"dokumushi","disableSend":false,"placeBeforeInput":false,"injectInput":false,"qrList":[{"id":1,"label":"init","title":"","message":"/echo Initializing |\n/if left={{lastMessageId}} rule=neq right=0 \"/abort\" |\n\n/setvar key=output {} |\n/setvar key=firstLoad true |\n\n/input #{{getvar::pass}}<script type=\"text/javascript\">\n(() => {setTimeout(() => {\n\n//essentials\n//get the popup components we can play with\nconst popup = document.querySelector(\"#dialogue_popup_holder\");\nconst popupHeader = popup.querySelector(\"#dialogue_popup_text\");\nconst popupInput = popup.querySelector(\"#dialogue_popup_input\");\nconst popupControls = popup.querySelector(\"#dialogue_popup_controls\");\nconst okButton = popupControls.querySelector(\"#dialogue_popup_ok\");\nconst cancelButton = popupControls.querySelector(\"#dialogue_popup_cancel\");\n\n//output setter\nconst setReturnValue = (val) => {\n  popupInput.value = val;\n};\n\n//hide/show popup elems - only select: popupHeader, popupInput, okButton, cancelButton\nconst hidePopupElems = (elems) => {\n  elems.forEach((elem) => {\n    elem.style.visibility = \"hidden\"\n    elem.style.position = \"absolute\"\n  })\n};\nconst showPopupElems = (elems) => {\n  elems.forEach((elem) => {\n    elem.style.visibility = \"visible\"\n    elem.style.position = \"static\"\n  })\n};\n\nconst main = () => {\n  hidePopupElems([popupInput]);\n\n  setReturnValue(\"JS unlocked!\")\n  \n  okButton.addEventListener(\"click\", (e) => {\n    showPopupElems([popupHeader, popupInput, okButton, cancelButton])\n  });\n  cancelButton.addEventListener(\"click\", (e) => {\n    showPopupElems([popupHeader, popupInput, okButton, cancelButton])\n  });\n};\n\nmain();\n\n}, 0)})();\n</script>\n\n<h3>Hello and welcome! If you see a \"JS unlocked!\" message after pressing ok, that means your user script is working.</h3> |\n\n/echo","contextList":[],"preventAutoExecute":true,"isHidden":true,"executeOnStartup":false,"executeOnUser":false,"executeOnAi":false,"executeOnChatChange":false,"executeOnGroupMemberDraft":false,"automationId":""},{"id":3,"label":"userprocess","title":"","message":"/setvar key=userinput {{input}} |\n/run dokumushi.updatestats","contextList":[],"preventAutoExecute":true,"isHidden":true,"executeOnStartup":false,"executeOnUser":false,"executeOnAi":false,"executeOnChatChange":false,"executeOnGroupMemberDraft":false,"automationId":""},{"id":5,"label":"aiprocess","title":"","message":"/if left={{lastMessageId}} right=0 rule=eq \"/abort\"","contextList":[],"preventAutoExecute":true,"isHidden":true,"executeOnStartup":false,"executeOnUser":false,"executeOnAi":true,"executeOnChatChange":false,"executeOnGroupMemberDraft":false,"automationId":""},{"id":7,"label":"Send","title":"","message":"/run dokumushi.userprocess |\n/send {{getvar::userinput}}{{newline}}{{pipe}} |\n/trigger | /flushvar nadanada | /setinput","contextList":[],"preventAutoExecute":true,"isHidden":false,"executeOnStartup":false,"executeOnUser":false,"executeOnAi":false,"executeOnChatChange":false,"executeOnGroupMemberDraft":false,"automationId":""},{"id":9,"label":"updatestats","title":"","message":"/setvar key=tomsgprocess {{lastMessage}} |\n/setvar key=startregex ```\\s* |\n/setvar key=endregex \\s*``` |\n/run creamsan.regextract | /setvar key=extr |\n\n/setvar key=varname extr |\n/run creamsan.isvardefined |\n/if left={{pipe}} rule=eq right=false \"/setvar key=extr meow\" |\n\n/input #{{getvar::pass}}<script type=\"text/javascript\">\n(() => {setTimeout(() => {\n\n//essentials\n//get the popup components we can play with\nconst popup = document.querySelector(\"#dialogue_popup_holder\");\nconst popupHeader = popup.querySelector(\"#dialogue_popup_text\");\nconst popupInput = popup.querySelector(\"#dialogue_popup_input\");\nconst popupControls = popup.querySelector(\"#dialogue_popup_controls\");\nconst okButton = popupControls.querySelector(\"#dialogue_popup_ok\");\nconst cancelButton = popupControls.querySelector(\"#dialogue_popup_cancel\");\n\n//output setter\nconst setReturnValue = (val) => {\n  popupInput.value = val;\n};\n\n//hide/show popup elems - only select: popupHeader, popupInput, okButton, cancelButton\nconst hidePopupElems = (elems) => {\n  elems.forEach((elem) => {\n    elem.style.visibility = \"hidden\"\n    elem.style.position = \"absolute\"\n  })\n};\nconst showPopupElems = (elems) => {\n  elems.forEach((elem) => {\n    elem.style.visibility = \"visible\"\n    elem.style.position = \"static\"\n  })\n};\n\n\nconst formatSeconds = (seconds) => {\n  const days = Math.floor(seconds / 86400)\n  seconds %= 86400\n  const hours = Math.floor(seconds / 3600)\n  seconds %= 3600\n  const minutes = Math.floor(seconds / 60)\n  seconds %= 60\n\n  return `${days}:${hours.toString().padStart(2, \"0\")}:${minutes.toString().padStart(2, \"0\")}:${seconds.toString().padStart(2, \"0\")}`\n}\n\n\nconst CRITICAL_HIGH = 75\nconst TIME_REMAIN_REGEX = /(?<=time passed\\s?[:\\-]\\s)\\d*/i\nconst DIED_REGEX = /(?<=(?:died\\|dead\\|killed)\\s?[:\\-]\\s)[\\S\\s]*?(?=\\n\\|$)/i\nconst NAMES = [\"Hideki\", \"Toshio\", \"Kenta\", \"Yumi\", \"Miyuki\", \"Miho\"]\nconst STAT_NAMES = [\"hunger\", \"insanity\", \"anger\", \"lust\"]\nconst updateStats = () => {\n  const firstLoad = {{getvar::firstLoad}}\n  let stats = {}\n  let timeRemaining\n  let toJB = \"\"\n  let dead = []\n  \n  if(firstLoad) {\n    NAMES.forEach((name) => {\n      stats[name] = {}\n      STAT_NAMES.forEach((statName) => {\n        stats[name][statName] = 0\n      })\n    })\n    timeRemaining = 604233\n  }\n  else {\n    const extr = `{{getvar::extr}}`\n    const output = {{getvar::output}}\n    timeRemaining = output[\"timeRemaining\"]\n    dead = output[\"dead\"]\n    stats = output[\"stats\"]\n\n    //dead\n    const deadExtr = extr.match(DIED_REGEX)\n    const deadArr = (deadExtr == undefined) ? [] : deadExtr[0].split(/\\s*,\\s*/)\n    deadArr.forEach((newDead) => {\n      if(dead.includes(newDead) === false) {\n        dead.push(newDead)\n      }\n    })\n    const names = NAMES.filter((name) => dead.includes(name) === false)\n\n    //time\n    const timePassed = parseInt(extr.match(TIME_REMAIN_REGEX))\n    timeRemaining = (isNaN(timePassed)) ? timeRemaining - 300 : timeRemaining - timePassed\n    const timeRemainingDisp = formatSeconds(timeRemaining)\n\n    //stats\n    names.forEach((name) => {\n      STAT_NAMES.forEach((statName) => {\n        const regex = new RegExp(`(?<=${name}[\\\\S\\\\s]*?${statName}\\\\s?[:\\\\-]\\\\s)[+\\\\-]?\\\\d*`, \"i\")\n        const interactionAdd = parseInt(extr.match(regex))\n        let naturalAdd = 0\n\n        switch(statName) {\n          case \"hunger\": naturalAdd += 1\n        }\n\n        switch(`${name} ${statName}`) {\n          case \"Hideki anger\": naturalAdd += 1; break;\n          case \"Hideki insanity\": naturalAdd += 1; break;\n          case \"Toshio hunger\": naturalAdd += 3; break;\n          case \"Toshio lust\": naturalAdd += 1; break;\n          case \"Kenta anger\": naturalAdd += 3; break;\n          case \"Kenta hunger\": naturalAdd += 1; break;\n          case \"Yumi insanity\": naturalAdd += 3; break;\n          case \"Yumi lust\": naturalAdd += 1; break;\n          case \"Miyuki insanity\": naturalAdd += 1; break;\n          case \"Miyuki lust\": naturalAdd += 1; break;\n          case \"Miho lust\": naturalAdd += 3; break;\n          case \"Miho insanity\": naturalAdd += 1; break;\n        }\n        \n        stats[name][statName] = (isNaN(interactionAdd)) ? stats[name][statName] + naturalAdd : stats[name][statName] + interactionAdd + naturalAdd\n        stats[name][statName] = Math.max(0, stats[name][statName])\n\n        if(stats[name][statName] >= CRITICAL_HIGH) {\n          const statJB = `\n- ${name}'s ${statName} is critically high.\n- ${name} will take drastic action to reduce such high ${statName}.\n- Vividly describe ${name}'s actions.\n- Reduce ${name}'s ${statName} after if successful.`\n          toJB = `${toJB}\n${statJB}`\n        }\n        else if(stats[name][statName] >= CRITICAL_HIGH * 0.75) {\n          const statJB = `\n- ${name}'s ${statName} is getting high.\n- ${name} is feeling it but won't take drastic action yet.`\n          toJB = `${toJB}\n${statJB}`\n        }\n\n      })\n    })\n\n    //to jb\n    const deadDisp = (dead.length <= 0) ? \"None\" : dead.map((name) => `${name}`).join(' ')\n\n    toJB = `Time remaining:\n${timeRemainingDisp}\nDead:\n${deadDisp}\n${toJB}`\n  }\n\n  let output = {\n    \"timeRemaining\": timeRemaining,\n    \"stats\": stats,\n    \"dead\": dead,\n    \"firstLoad\": \"false\",\n    \"toJB\": toJB\n  }\n\n  setReturnValue(JSON.stringify(output))\n}\n\n\nconst main = () => {\n  hidePopupElems([popupInput]);\n\n  updateStats()\n\n  okButton.addEventListener(\"click\", (e) => {\n    showPopupElems([popupHeader, popupInput, okButton, cancelButton])\n  });\n  cancelButton.addEventListener(\"click\", (e) => {\n    showPopupElems([popupHeader, popupInput, okButton, cancelButton])\n  });\n\n  let ev = new Event(\"click\")\n  okButton.dispatchEvent(ev)\n};\n\nmain();\n\n}, 0)})();\n</script>\n\n<h3>Please wait. If this popup is stuck, there's probably an error.</h3>\n\n|\n\n/setvar key=outraw |\n/setvar key=varname outraw | /run creamsan.isvardefined |\n/if left={{pipe}} rule=eq right=false \"/abort\" |\n\n/setvar key=output {{getvar::outraw}} |\n\n/getvar index=firstLoad output |\n/setvar key=firstLoad |\n\n/getvar index=toJB output |\n/setvar key=jbout |\n\n/flushvar nadanada","contextList":[],"preventAutoExecute":true,"isHidden":true,"executeOnStartup":false,"executeOnUser":false,"executeOnAi":false,"executeOnChatChange":false,"executeOnGroupMemberDraft":false,"automationId":""}],"idIndex":10}