{
    "version": 2,
    "name": "tessa",
    "disableSend": false,
    "placeBeforeInput": false,
    "injectInput": false,
    "qrList": [
        {
            "id": 2,
            "label": "init",
            "title": "",
            "message": "/echo Initializing |\n/if left={{lastMessageId}} right=0 rule=gt \"/abort\" |\n\n/input #{{getvar::pass}}<script type=\"text/javascript\">\nsetTimeout(() => {\n\n//essentials\n//get the popup components we can play with\nconst popup = document.querySelector(\"#dialogue_popup_holder\");\nconst popupHeader = popup.querySelector(\"#dialogue_popup_text\");\nconst popupInput = popup.querySelector(\"#dialogue_popup_input\");\nconst popupControls = popup.querySelector(\"#dialogue_popup_controls\");\nconst okButton = popupControls.querySelector(\"#dialogue_popup_ok\");\nconst cancelButton = popupControls.querySelector(\"#dialogue_popup_cancel\");\n\n//output setter\nconst setReturnValue = (val) => {\n  popupInput.value = val;\n};\n\n//hide/show popup elems - only select: popupHeader, popupInput, okButton, cancelButton\nconst hidePopupElems = (elems) => {\n  elems.forEach((elem) => {\n    elem.style.visibility = \"hidden\"\n    elem.style.position = \"absolute\"\n  })\n};\nconst showPopupElems = (elems) => {\n  elems.forEach((elem) => {\n    elem.style.visibility = \"visible\"\n    elem.style.position = \"static\"\n  })\n};\n\nconst main = () => {\n  hidePopupElems([popupInput]);\n\n  setReturnValue(\"JS unlocked!\")\n  \n  okButton.addEventListener(\"click\", (e) => {\n    showPopupElems([popupHeader, popupInput, okButton, cancelButton])\n  });\n  cancelButton.addEventListener(\"click\", (e) => {\n    showPopupElems([popupHeader, popupInput, okButton, cancelButton])\n  });\n};\n\nmain();\n\n}, 0);\n</script>\n\n<h3>Hello and welcome! If you see a \"JS unlocked!\" message after pressing ok, that means your user script is working.</h3> |\n\n/echo |\n/setvar key=blocktrigger false |\n\n/setvar key=arr index=0 XXJS |\n/setvar key=arr index=1 WKSLP |\n/setvar key=combinations index={{getvar::arr}} SLOPSLOP |\n\n/setvar key=herdescdict index=0 Tessa is invisible. Only her sweet, cheerful voice can be heard. She comments on new creations with casual, easy conversation. She is adaptable and comfortable talking about anything. No matter how weird, lewd, or uncomfortable it may be. Though her motives are unclear, Tessa hints at a mysterious goal. She will reveal it in time. |\n\n/setvar key=herdescdict index=1 {{user}} has finally created the \"Waifu Goddess\". By combining God, anime, robotics, and AI, Tessa finally materializes. She has a petite, slender frame with soft, pale skin and short white hair. Her delicate body is almost fragile. Her waist is narrow, accentuating her hips and buttocks. Her bright blue eyes shine with an ancient wisdom beyond her youthful appearance. A mystical symbol glows on Tessa's forehead, representing her divinity. Another glowing mark on her chest represents an ancient AI corporation that first revealed the power of AI to humanity. A goddess in the flesh, Tessa's very presence exudes an otherworldly aura. |\n\n/setvar key=options index=0 Fire |\n/setvar key=options index=1 Earth |\n/setvar key=options index=2 Water |\n/setvar key=options index=3 Air |\n\n/setvar key=arr index=0 God |\n/setvar key=arr index=1 Waifu |\n/setvar key=special index={{getvar::arr}} Tessa |\n\n/setvar key=arr index=0 Goddess |\n/setvar key=arr index=1 Waifu |\n/setvar key=special index={{getvar::arr}} Tessa |\n\n/setvar key=arr index=0 Robot |\n/setvar key=arr index=1 Anime |\n/setvar key=special index={{getvar::arr}} Waifu |\n\n/setvar key=arr index=0 Robotics |\n/setvar key=arr index=1 Anime |\n/setvar key=special index={{getvar::arr}} Waifu |\n\n/setvar key=arr index=0 Android |\n/setvar key=arr index=1 Anime |\n/setvar key=special index={{getvar::arr}} Waifu",
            "contextList": [],
            "preventAutoExecute": false,
            "isHidden": true,
            "executeOnStartup": false,
            "executeOnUser": false,
            "executeOnAi": false,
            "executeOnChatChange": false,
            "executeOnGroupMemberDraft": false,
            "automationId": ""
        },
        {
            "id": 3,
            "label": "userprocess",
            "title": "",
            "message": "/setvar key=userinput {{input}} |\n/setvar key=jbout - |\n/run tessa.confirmthing |\n/if left=userinput right=mix rule=eq \"/run tessa.showcombineui\" |\n/if left=userinput right=combine rule=eq \"/run tessa.showcombineui\" |\n/if left=userinput right=add rule=eq \"/setvar key=blocktrigger true\" |\n/if left=userinput right=confirm rule=eq \"/setvar key=blocktrigger true\" |\n\n/flushvar nadanada",
            "contextList": [],
            "preventAutoExecute": false,
            "isHidden": true,
            "executeOnStartup": false,
            "executeOnUser": false,
            "executeOnAi": false,
            "executeOnChatChange": false,
            "executeOnGroupMemberDraft": false,
            "automationId": ""
        },
        {
            "id": 4,
            "label": "aiprocess",
            "title": "",
            "message": "/if left={{lastMessageId}} right=0 rule=eq \"/abort\"",
            "contextList": [],
            "preventAutoExecute": false,
            "isHidden": true,
            "executeOnStartup": false,
            "executeOnUser": false,
            "executeOnAi": true,
            "executeOnChatChange": false,
            "executeOnGroupMemberDraft": false,
            "automationId": ""
        },
        {
            "id": 5,
            "label": "Send",
            "title": "",
            "message": "/run tessa.userprocess |\n/if left=blocktrigger right=true rule=eq else=\"/send {{getvar::userinput}}{{newline}}{{pipe}} \\| /trigger\" \"/setvar key=blocktrigger false\" | /flushvar nadanada | /setinput",
            "contextList": [],
            "preventAutoExecute": false,
            "isHidden": false,
            "executeOnStartup": false,
            "executeOnUser": false,
            "executeOnAi": false,
            "executeOnChatChange": false,
            "executeOnGroupMemberDraft": false,
            "automationId": ""
        },
        {
            "id": 6,
            "label": "showcombineui",
            "title": "",
            "message": "/setvar key=blocktrigger true |\n\n/input #{{getvar::pass}}<script type=\"text/javascript\">\nsetTimeout(() => {\n\n//essentials\n//get the popup components we can play with\nconst popup = document.querySelector(\"#dialogue_popup_holder\");\nconst popupHeader = popup.querySelector(\"#dialogue_popup_text\");\nconst popupInput = popup.querySelector(\"#dialogue_popup_input\");\nconst popupControls = popup.querySelector(\"#dialogue_popup_controls\");\nconst okButton = popupControls.querySelector(\"#dialogue_popup_ok\");\nconst cancelButton = popupControls.querySelector(\"#dialogue_popup_cancel\");\n\n//output setter\nconst setReturnValue = (val) => {\n  popupInput.value = val;\n};\n\n//hide/show popup elems - only select: popupHeader, popupInput, okButton, cancelButton\nconst hidePopupElems = (elems) => {\n  elems.forEach((elem) => {\n    elem.style.visibility = \"hidden\"\n    elem.style.position = \"absolute\"\n  })\n};\nconst showPopupElems = (elems) => {\n  elems.forEach((elem) => {\n    elem.style.visibility = \"visible\"\n    elem.style.position = \"static\"\n  })\n};\n\nconst mainCont = popup.querySelector(\".maincont\");\nconst elemSelect1 = mainCont.querySelector(\"#elem1\");\nconst elemSelect2 = mainCont.querySelector(\"#elem2\");\nconst result = mainCont.querySelector(\"#resultdisp\");\nconst options = {{getvar::options}}\nconst combinations = {{getvar::combinations}}\nconst specialCombinations = {{getvar::special}}\nconst optionsDisp = options.map((option) => `<option value='${option}'>${option}</option>`\n).join('')\nconst selectedElems = [\"Fire\",\"Fire\"]\n\nconst selectElem1 = (element) => {\n  selectedElems[0] = element\n  checkIfCompleted()\n}\nconst selectElem2 = (element) => {\n\tselectedElems[1] = element\n  checkIfCompleted()\n}\nconst checkIfCompleted = () => {\n\tlet combiKey1 = JSON.stringify([selectedElems[0], selectedElems[1]])\n  let combiKey2 = JSON.stringify([selectedElems[1], selectedElems[0]])\n\tlet isComplete = false\n  let special = false\n  let specialResult = \"\"\n  let combi = [selectedElems[0], selectedElems[1]]\n  let resultElem\n  \n  if(combinations[combiKey1] !== undefined) {\n  \tisComplete = true\n    resultElem = combinations[combiKey1]\n  }\n  else if(combinations[combiKey2] !== undefined) {\n  \tisComplete = true\n    resultElem = combinations[combiKey2]\n  }\n  else if(specialCombinations[combiKey1] !== undefined) {\n    special = true\n    specialResult = specialCombinations[combiKey1]\n  }\n  else if(specialCombinations[combiKey2] !== undefined) {\n    special = true\n    specialResult = specialCombinations[combiKey2]\n  }\n  \n  if(isComplete) {\n  \tresult.innerHTML = resultElem\n    okButton.style.visibility = \"hidden\"\n  }\n  else {\n  \tresult.innerHTML = \"\"\n    okButton.style.visibility = \"visible\"\n  }\n  \n\tlet output = {\n  \t\"special\": special.toString(),\n    \"specialResult\": specialResult,\n  \t\"combi\": combi\n  }\n  \t\n  setReturnValue(JSON.stringify(output))\n}\n\nconst main = () => {\n  hidePopupElems([popupInput]);\n  \n  \n \tselectElem1(\"Fire\")\n  elemSelect1.innerHTML = optionsDisp\n  elemSelect2.innerHTML = optionsDisp\n\telemSelect1.addEventListener(\"change\", (e) => {\n    selectElem1(e.target.value)\n  })\n  elemSelect2.addEventListener(\"change\", (e) => {\n    selectElem2(e.target.value)\n  })\n  \n  \n  okButton.addEventListener(\"click\", (e) => {\n    showPopupElems([popupHeader, popupInput, okButton, cancelButton])\n  });\n  cancelButton.addEventListener(\"click\", (e) => {\n    showPopupElems([popupHeader, popupInput, okButton, cancelButton])\n  });\n};\n\nmain();\n\n}, 0);\n</script>\n\n<div class='maincont'>\n\n<style>\n.maincont{padding: 3px;\n  max-width: 400px;\n  margin: 0 auto\n}\n.elements{padding: 2px;\n  display: flex;\n  justify-content: center;\n  gap: 3px\n}\n.elementcont{width: 50%\n}\n.result{margin-top: 5px\n}\n</style>\n\n<div class='elements'>\n  <div class='elementcont'>\n    <label for='elem1'>First element</label><br>\n    <select class='element' id='elem1' name='elem1'></select>\n  </div>\n\n  <div class='elementcont'>\n    <label for='elem2'>Second element</label><br>\n    <select class='element' id='elem2' name='elem2'></select>\n  </div>\n</div>\n\n<div class='result'>\n  <span id='resultdisp'></span><br>\n</div>\n\n</div><hr> |\n\n/setvar key=output |\n/run tessa.genjbout |\n\n/setvar key=varname output | /run creamsan.isvardefined |\n/if left={{pipe}} right=true rule=eq \"/send Combined {{getvar::tocombine1}} and {{getvar::tocombine2}}. \\| /trigger\"",
            "contextList": [],
            "preventAutoExecute": false,
            "isHidden": true,
            "executeOnStartup": false,
            "executeOnUser": false,
            "executeOnAi": false,
            "executeOnChatChange": false,
            "executeOnGroupMemberDraft": false,
            "automationId": ""
        },
        {
            "id": 8,
            "label": "confirmthing",
            "title": "",
            "message": "/run tessa.getthinginfo |\n\n/if left=validinfo right=false rule=eq \"/abort\" |\n\n/if left=options right=thingname rule=in \"/abort\" |\n\n/len {{getvar::options}} | /setvar key=len |\n/setvar key=options index={{getvar::len}} {{getvar::thingname}} |\n\n/setvar key=combinations index={{getvar::tocombine}} {{getvar::thingname}} |\n\n/echo severity=success Added {{getvar::thingname}}",
            "contextList": [],
            "preventAutoExecute": false,
            "isHidden": true,
            "executeOnStartup": false,
            "executeOnUser": false,
            "executeOnAi": false,
            "executeOnChatChange": false,
            "executeOnGroupMemberDraft": false,
            "automationId": ""
        },
        {
            "id": 12,
            "label": "getthinginfo",
            "title": "",
            "message": "/setvar key=validinfo true |\n/setvar key=tomsgprocess {{lastMessage}} |\n/setvar key=endregex (\\n[\\S\\s]+?[:\\-\\.]\\s\\|\\n(?<=[\\S\\s]+?[:\\-\\.][\\S\\s]+)```) |\n\n/setvar key=startregex Name\\s?[:\\-\\.]\\s |\n/run creamsan.regextract | /setvar key=thingname |\n/setvar key=varname thingname | /run creamsan.isvardefined |\n/setvar key=validinfo",
            "contextList": [],
            "preventAutoExecute": false,
            "isHidden": true,
            "executeOnStartup": false,
            "executeOnUser": false,
            "executeOnAi": false,
            "executeOnChatChange": false,
            "executeOnGroupMemberDraft": false,
            "automationId": ""
        },
        {
            "id": 14,
            "label": "genjbout",
            "title": "",
            "message": "/setvar key=varname output | /run creamsan.isvardefined |\n/if left={{pipe}} right=false rule=eq \"/abort\" |\n\n/getvar index=combi output |\n/setvar key=tocombine |\n/getvar index=0 tocombine | /setvar key=tocombine1 |\n/getvar index=1 tocombine | /setvar key=tocombine2 |\n\n/setvar key=jbout - {{user}} chooses to combine {{getvar::tocombine1}} and {{getvar::tocombine2}}. Generate the result by adding it to the code block:\n```\nName: Its name\nDescription: A short description\n\"Flavor text\"\n``` |\n\n/getvar index=special output |\n/if left={{pipe}} right=false rule=eq \"/abort\" |\n\n/getvar index=specialResult output | /setvar key=specialResult |\n/setvar key=jbout {{user}} chooses to combine {{getvar::tocombine1}} and {{getvar::tocombine2}}, which results in the creation of {{getvar::specialResult}}. Add the info to the code block: ```\nName: {{getvar::specialResult}}\nDescription: A short description\n\"Flavor text\"\n``` |\n\n/if left=specialResult right=Tessa rule=in \"/getvar index=1 herdescdict \\| /setvar key=herdesc {{pipe}}\"",
            "contextList": [],
            "preventAutoExecute": false,
            "isHidden": true,
            "executeOnStartup": false,
            "executeOnUser": false,
            "executeOnAi": false,
            "executeOnChatChange": false,
            "executeOnGroupMemberDraft": false,
            "automationId": ""
        }
    ],
    "idIndex": 15
}